name: Build and deploy

on:
  push:
    branches: "main"
  workflow_dispatch:

env:
  PYTHON_VERSION: 3.11
  NODE_VERSION: 18

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: object-Object/ci/setup@v0
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          python-packages: nox
          node-version: ${{ env.NODE_VERSION }}
          npm-packages: aws-cdk
      
      - name: Synthesize stack and build package
        run: nox -t build

      - name: Upload synth artifact
        uses: actions/upload-artifact@v4
        with:
          name: synth
          path: cdk.out

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: dist

  deploy-aws-cdk:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: prod-aws-cdk
    permissions:
      id-token: write
      contents: read
    outputs:
      stack-name: ${{ steps.deploy.outputs.StackName }}
      application-name: ${{ steps.deploy.outputs.ApplicationName }}
      deployment-group-name: ${{ steps.deploy.outputs.DeploymentGroupName }}
      iam-role-arn: ${{ steps.deploy.outputs.ActionsCodeDeployRoleARN }}
      artifacts-bucket-name: ${{ steps.deploy.outputs.ArtifactsBucketName }}
    steps:
      - uses: actions/checkout@v4
      - uses: object-Object/ci/setup@v0
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          python-packages: nox
          node-version: ${{ env.NODE_VERSION }}
          npm-packages: aws-cdk
          role-to-assume: default

      - name: Download synth artifact
        uses: actions/download-artifact@v4
        with:
          name: synth
          path: cdk.out

      - name: Deploy CDK stack
        id: deploy
        run: nox -s deploy_cdk_ci -- prod

  deploy-codedeploy:
    needs: deploy-aws-cdk
    runs-on: ubuntu-latest
    environment:
      name: prod-codedeploy
      url: ${{ steps.deploy.outputs.url }}
    permissions:
      id-token: write
      contents: read
    env:
      STACK_NAME: ${{ needs.deploy-aws-cdk.outputs.stack-name }}
      APPLICATION_NAME: ${{ needs.deploy-aws-cdk.outputs.application-name }}
      DEPLOYMENT_GROUP_NAME: ${{ needs.deploy-aws-cdk.outputs.deployment-group-name }}
      S3_BUCKET: ${{ needs.deploy-aws-cdk.outputs.artifacts-bucket-name }}
    steps:
      - uses: actions/checkout@v4
      - uses: object-Object/ci/setup@v0
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          python-packages: nox
          role-to-assume: ${{ needs.deploy-aws-cdk.outputs.iam-role-arn }}

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build
          path: codedeploy/dist

      - name: Deploy application
        
        run: nox -s deploy_codedeploy

      - name: Upload deployment bundle to S3
        id: upload-bundle
        run: |
          S3_KEY="${{ env.STACK_NAME }}/${{ github.sha }}.zip"
          echo "s3-key=$S3_KEY" >> "$GITHUB_OUTPUT"
          aws deploy push \
            --application-name ${{ env.APPLICATION_NAME }} \
            --s3-location s3://${{ env.S3_BUCKET }}/$S3_KEY \
            --source codedeploy

      - name: Create CodeDeploy deployment
        id: deploy
        run: |
          response="$(aws deploy create-deployment \
            --application-name ${{ env.APPLICATION_NAME }} \
            --deployment-group-name ${{ env.DEPLOYMENT_GROUP_NAME }} \
            --s3-location "bucket=${{ env.S3_BUCKET }},key=${{ steps.upload-bundle.outputs.s3-key }},bundleType=zip")"
          
          deployment_id="$(echo "$response" | jq '.deploymentId' --raw-output)"
          url="https://us-east-1.console.aws.amazon.com/codesuite/codedeploy/deployments/${deployment_id}?region=us-east-1"
          echo "Deployment URL: $url"

          echo "deployment-id=$deployment_id" >> "$GITHUB_OUTPUT"
          echo "url=$url" >> "$GITHUB_OUTPUT"

      - name: Wait for deployment to finish
        run: aws deploy wait deployment-successful --deployment-id ${{ steps.deploy.outputs.deployment-id }}
